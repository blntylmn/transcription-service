<div class="mediaDrop">
	
	<p>Drop a media for transcription<br>or click this box to select a file...</p>
	<!--<p>File must be {{validFileTypes}}</p>-->
	<p>File must be {{#each validFileTypes}}<strong>.{{this}}</strong> {{/each}}</p>
	<input type="file" data-invisible="true" />
</div>

<div class="transcribeOptions">
	
	<div class="o-forms">

		<div>
			<label class="o-forms__label">Transcription Output Type</label>
			<input type="radio" name="radio" value="1" class="o-forms__radio" id="radio11" checked></input>
			<label for="radio11" class="o-forms__label">JSON</label>
			<input type="radio" name="radio" value="2" class="o-forms__radio" id="radio12"></input>
			<label for="radio12" class="o-forms__label">VTT</label>
		</div>

		<label for="o-forms-standard" class="o-forms__label">Service Token</label>
		<small class="o-forms__additional-info"><a href="/token/generate" target="_blank">Get a token</a></small>
		<input type="text" id="o-forms-standard" placeholder="3d3e5af97225421a8d1b3a88f34022cf" class="o-forms__text" required="true"></input>

	</div>

	<input type="submit" value="Transcribe" class="o-buttons o-buttons--standout o-buttons--big submitData" />

</div>

<script>

	(function(){

		'use strict';

		var prevent = function(e){e.preventDefault();e.stopImmediatePropagation();};
		var validFileTypes = [{{#each validFileTypes}}'{{this}}',{{/each}}];
		var fileData = undefined;
		var dropZone = document.querySelector('.mediaDrop');
		var fileSelect = document.querySelector('input[type="file"]');
		var submitBtn = document.querySelector('.submitData');
		var tokenInput = "";

		var jobStatus = undefined;

		window.addEventListener('drop', function(e){
			prevent(e);
			console.log(e);
			document.body.dataset['dragging'] = 'false';
		}, false);

		window.addEventListener('dragover', function(e){
			prevent(e);
		}, false);

		window.addEventListener('dragenter', function(e){
			prevent(e);
			document.body.dataset['dragging'] = 'true';
		}, false);

		window.addEventListener('dragend', function(e){
			prevent(e);
			document.body.dataset['dragging'] = 'false';
		}, false);


		function handleSelectedFile(e, wasDropped){

			var selectedFile = wasDropped ? e.dataTransfer.files[0] : e;
			var reader = new FileReader();

			reader.onload = function(f){
				console.log(f.target.result, f.target.result.byteLength);
				fileData = f.target.result;
			}

			fileData = selectedFile;

		}

		function uploadFormToServer(){
			var oReq = new XMLHttpRequest();
			
			oReq.upload.addEventListener('progress', function(evt){
				
				var percentUploaded = (evt.loaded / evt.total) * 100;
				console.log(percentUploaded);

			}, false);

			oReq.open("POST", "/transcribe?token=54b3b5ac9fe84b88a84ab2cb14d67335", true);
			
			oReq.onload = function(oEvent) {
				debugger;
				if (oReq.status == 200) {
					var id = oReq.responseText;
					console.log("Upload successful");
					(function(jobID){
						
						jobStatus = setInterval(function(){
							//checkJobStatus(jobID);
							console.log(jobID);
						}, 3000);

					})(id);

				} else {
					console.error("Upload failed");
					console.error(oReq);
				}
			};
			debugger;
			oReq.send(fileData);

		}



		dropZone.addEventListener('drop', function(e){
			console.log(this.dataset.filetype);
			handleSelectedFile(e, true);
		}, false);

		dropZone.addEventListener('click', function(e){
			fileSelect.click();
		}, false);

		fileSelect.addEventListener('change', function(e){
			console.log(e);
			console.log(this.files);
			handleSelectedFile(this.files[0], false);
		}, false);

		submitBtn.addEventListener('click', function(e){
			uploadFormToServer();
		}, false);

	})();


</script>